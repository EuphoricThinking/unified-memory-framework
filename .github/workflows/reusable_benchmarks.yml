# Executes benchmarks implemented in this repository
name: Benchmarks

on:
  workflow_call:
    inputs:
      pr_no:
        required: true
        # even though this is a number, this is a workaround for issues with
        # reusable workflow calls that result in "Unexpected value '0'" error.
        type: string
        default: '0'
      bench_script_params:
        required: false
        type: string
        default: ''
      upload_report:
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: write

env:
  BUILD_DIR : "${{github.workspace}}/build"
  INSTL_DIR : "${{github.workspace}}/../install-dir"

jobs:
  benchmarks:
    name: Benchmarks
    # env:
      # VCPKG_PATH: "${{github.workspace}}/build/vcpkg/packages/hwloc_x64-windows;${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows;${{github.workspace}}/build/vcpkg/packages/jemalloc_x64-windows"
    strategy:
      matrix:
        os: ['ubuntu-latest'] #, 'windows-latest']
        include: 
          # Windows doesn't recognize 'CMAKE_BUILD_TYPE', it uses '--config' param in build command to determine the build type
          - os: ubuntu-latest
            extra_build_option: '-DCMAKE_BUILD_TYPE=Release'
    runs-on: ${{matrix.os}}

    steps:
    - name: Add comment to PR
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      if: ${{ always() && inputs.pr_no != 0 }}
      with:
        script: |
          const pr_no = '${{ inputs.pr_no }}';
          const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          const params = '${{ inputs.bench_script_params }}';
          const body = `Compute Benchmarks run (with params: ${params}):\n${url}`;

          github.rest.issues.createComment({
            issue_number: pr_no,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })

    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    # We need to fetch special ref for proper PR's merge commit. Note, this ref may be absent if the PR is already merged.
    - name: Fetch PR's merge commit
      if: ${{ inputs.pr_no != 0 }}
      env:
        PR_NO: ${{ inputs.pr_no }}
      run: |
        git fetch -- https://github.com/${{github.repository}} +refs/pull/${PR_NO}/*:refs/remotes/origin/pr/${PR_NO}/*
        git checkout origin/pr/${PR_NO}/merge
        git rev-parse origin/pr/${PR_NO}/merge

    - name: Install apt packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake libhwloc-dev libnuma-dev libtbb-dev

    # - name: Initialize vcpkg
    #   if: matrix.os == 'windows-latest'
    #   uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1 # v11.5
    #   with:
    #     vcpkgGitCommitId: 3dd44b931481d7a8e9ba412621fa810232b66289
    #     vcpkgDirectory: ${{env.BUILD_DIR}}/vcpkg
    #     vcpkgJsonGlob: '**/vcpkg.json'

    # - name: Install vcpkg packages
    #   if: matrix.os == 'windows-latest'
    #   run: vcpkg install
    #   shell: pwsh # Specifies PowerShell as the shell for running the script.

    # -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}"
    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        ${{matrix.extra_build_option}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DUMF_BUILD_SHARED_LIBRARY=ON
        -DUMF_BUILD_BENCHMARKS=ON
        -DUMF_BUILD_BENCHMARKS_MT=ON
        -DUMF_BUILD_TESTS=OFF
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=OFF
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=ON
        -DUMF_BUILD_CUDA_PROVIDER=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON

    - name: Build UMF on Linux
      if: matrix.os == 'ubuntu-latest'
      run: cmake --build ${{env.BUILD_DIR}} -j $(nproc)

    # - name: Build UMF on Windows
    #   if: matrix.os == 'windows-latest'
    #   run: cmake --build ${{env.BUILD_DIR}} --config Release -j $Env:NUMBER_OF_PROCESSORS

    - name: Checkout UR
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: oneapi-src/unified-runtime
        path: ur-repo
        fetch-depth: 1
        fetch-tags: false

    - name: Install pip packages
      run: |
        pip install --force-reinstall -r ${{github.workspace}}/ur-repo/third_party/benchmark_requirements.txt

    - name: Install HWLOC
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install libhwloc-dev

    - name: Run benchmarks
      id: benchmarks
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{env.BUILD_DIR}}
      run: >
        ${{ github.workspace }}/ur-repo/scripts/benchmarks/main.py
        ~/bench_workdir
        --umf  ${{env.BUILD_DIR}}
        ${{ inputs.upload_report && '--output-html' || '' }}
        ${{ inputs.bench_script_params }}

    - name: Test output
      run: >
        echo 'out: ${{ steps.benchmarks.outcome }}'

    # - name: Run benchmarks
    #   if: matrix.os == 'windows-latest'
    #   working-directory: ${{env.BUILD_DIR}}
    #   run: >
    #     python3 ${{ github.workspace }}/ur-repo/scripts/benchmarks/main.py
    #     ~/bench_workdir
    #     --umf  ${{env.BUILD_DIR}}
    #     ${{ inputs.upload_report && '--output-html' || '' }}
    #     ${{ inputs.bench_script_params }}

    - name: Add comment to PR
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      if: ${{ always() && inputs.pr_no != 0 }}
      with:
        script: |
          let markdown = ""
          try {
            const fs = require('fs');
            markdown = fs.readFileSync('${{env.BUILD_DIR}}/benchmark_results.md', 'utf8');
          } catch(err) {
          }

          const pr_no = '${{ inputs.pr_no }}';
          const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          const test_status = '${{ steps.benchmarks.outcome }}';
          const job_status = '${{ job.status }}';
          const params = '${{ inputs.bench_script_params }}';
          const body = `Compute Benchmarks run (${params}):\n${url}\nJob status: ${job_status}. Test status: ${test_status}.\n ${markdown}`;

          github.rest.issues.createComment({
            issue_number: pr_no,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })
  
    - name: Upload HTML report
      if: ${{ always() && inputs.upload_report }}
      uses: actions/cache/save@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: ${{env.BUILD_DIR}}/benchmark_results.html
        key: benchmark-results-${{ github.run_id }}
